# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: queries.sql
import datetime
from typing import Optional

import pydantic
import sqlalchemy
from app.db import models

CREATE_TWEET = """-- name: create_tweet \\:exec
insert into tweet (id, tweeted_at, text, replies, retweets, likes, views, user_handle, parent_id)
values (:p1, :p2, :p3, :p4, :p5, :p6, :p7, :p8, :p9)
"""


class CreateTweetParams(pydantic.BaseModel):
    id: int
    tweeted_at: datetime.datetime
    text: str
    replies: int
    retweets: int
    likes: int
    views: int
    user_handle: str
    parent_id: Optional[int]


CREATE_USER = """-- name: create_user \\:exec
insert into user_ (handle, name, description, following, followers)
values (:p1, :p2, :p3, :p4, :p5)
"""


class CreateUserParams(pydantic.BaseModel):
    handle: str
    name: str
    description: Optional[str]
    following: int
    followers: int


GET_TWEET = """-- name: get_tweet \\:one
select id, created_at, tweeted_at, text, replies, retweets, likes, views, user_handle, parent_id from tweet where id=:p1
"""


GET_USER = """-- name: get_user \\:one
select handle, created_at, name, description, following, followers from user_ where handle=:p1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_tweet(self, arg: CreateTweetParams) -> None:
        self._conn.execute(
            sqlalchemy.text(CREATE_TWEET),
            {
                "p1": arg.id,
                "p2": arg.tweeted_at,
                "p3": arg.text,
                "p4": arg.replies,
                "p5": arg.retweets,
                "p6": arg.likes,
                "p7": arg.views,
                "p8": arg.user_handle,
                "p9": arg.parent_id,
            },
        )

    def create_user(self, arg: CreateUserParams) -> None:
        self._conn.execute(
            sqlalchemy.text(CREATE_USER),
            {
                "p1": arg.handle,
                "p2": arg.name,
                "p3": arg.description,
                "p4": arg.following,
                "p5": arg.followers,
            },
        )

    def get_tweet(self, *, id: int) -> Optional[models.Tweet]:
        row = self._conn.execute(sqlalchemy.text(GET_TWEET), {"p1": id}).first()
        if row is None:
            return None
        return models.Tweet(
            id=row[0],
            created_at=row[1],
            tweeted_at=row[2],
            text=row[3],
            replies=row[4],
            retweets=row[5],
            likes=row[6],
            views=row[7],
            user_handle=row[8],
            parent_id=row[9],
        )

    def get_user(self, *, handle: str) -> Optional[models.User]:
        row = self._conn.execute(sqlalchemy.text(GET_USER), {"p1": handle}).first()
        if row is None:
            return None
        return models.User(
            handle=row[0],
            created_at=row[1],
            name=row[2],
            description=row[3],
            following=row[4],
            followers=row[5],
        )
